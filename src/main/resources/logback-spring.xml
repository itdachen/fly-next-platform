<configuration>
    <!-- 引用 Spring Boot 的 logback 基础配置 -->
    <!-- <include resource="org/springframework/boot/logging/logback/defaults.xml" />  -->

     <!-- 应用名称 -->
    <springProperty name="APP_NAME" scope="context" source="spring.application.name" defaultValue="undefined"/>


    <!-- 用于生成一个标识，防止多个 Docker 容器映射到同一台宿主机上出现目录名重复问题 -->
<!--    <define name="index" class="com.github.itdachen.boot.run.ip.IpLogConversionRule"/>-->
<!--    <property name="LOG_HOME" value="/tmp/logs/${APP_NAME}/${index}"/>-->

    <property name="LOG_HOME" value="/tmp/logs/${APP_NAME}"/>

    <!-- 自定义日志输出路径，以及日志名称前缀 -->
    <property name="LOG_FILE" value="./logs/${APP_NAME}.%d{yyyy-MM-dd}"/>
    <!-- 每行日志输出的格式 -->
    <property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"/>

    <!--  控制台标准继续输出内容  -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 日志输出的格式  -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${LOG_PATTERN}</pattern>
        </layout>
    </appender>


    <!-- 文件输出 -->
<!--    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">-->
<!--            &lt;!&ndash; 日志文件的命名格式 &ndash;&gt;-->
<!--            <fileNamePattern>${LOG_FILE}-%i.log</fileNamePattern>-->
<!--            &lt;!&ndash; 保留 30 天的日志文件 &ndash;&gt;-->
<!--            <maxHistory>30</maxHistory>-->
<!--            &lt;!&ndash; 单个日志文件最大大小 &ndash;&gt;-->
<!--            <maxFileSize>10MB</maxFileSize>-->
<!--            &lt;!&ndash; 日志文件的总大小，0 表示不限制 &ndash;&gt;-->
<!--            <totalSizeCap>0</totalSizeCap>-->
<!--            &lt;!&ndash; 重启服务时，是否清除历史日志，不推荐清理 &ndash;&gt;-->
<!--            <cleanHistoryOnStart>false</cleanHistoryOnStart>-->
<!--        </rollingPolicy>-->
<!--        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
<!--            <pattern>${LOG_PATTERN}</pattern>-->
<!--            <charset>UTF-8</charset>-->
<!--        </encoder>-->
<!--    </appender>-->


    <!--   info级别的日志，记录到对应的文件内 -->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/${APP_NAME}.log</file>
        <!-- 滚动策略，日志生成的时候会按照时间来进行分类，例如2023-05-11日的日志，后缀就会有2023-05-11，每天的日志归档后的名字都不一样      -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/${APP_NAME}.log.%d{yyyy-MM-dd}</fileNamePattern>
<!--            &lt;!&ndash;  日志只保留1个月 &ndash;&gt;-->
<!--            <maxHistory>1</maxHistory>-->


            <!-- 日志文件的命名格式 -->
<!--            <fileNamePattern>${LOG_FILE}-%i.log</fileNamePattern>-->
            <!-- 保留 30 天的日志文件 -->
            <maxHistory>30</maxHistory>
            <!-- 单个日志文件最大大小 -->
            <maxFileSize>10MB</maxFileSize>
            <!-- 日志文件的总大小，0 表示不限制 -->
            <totalSizeCap>0</totalSizeCap>
            <!-- 重启服务时，是否清除历史日志，不推荐清理 -->
            <cleanHistoryOnStart>false</cleanHistoryOnStart>


        </rollingPolicy>
        <!-- 日志输出的格式  -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </layout>
    </appender>

    <!--  error级别的日志，记录到对应的文件内  -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/${APP_NAME}_error.log</file>
        <!-- 滚动策略，日志生成的时候会按照时间来进行分类，例如2023-05-11日的日志，后缀就会有2023-05-11，每天的日志归档后的名字都不一样      -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/${APP_NAME}_error.log.%d{yyyy-MM-dd}</fileNamePattern>
            <!--  日志只保留1个月 -->
            <maxHistory>1</maxHistory>
        </rollingPolicy>
        <!-- 日志输出的格式  -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${LOG_PATTERN}</pattern>
        </layout>
        <!--   值记录error级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 本地 dev 开发环境 -->
<!--    <springProfile name="dev">-->
<!--        <include resource="org/springframework/boot/logging/logback/console-appender.xml" />-->
<!--        <root level="INFO">-->
<!--            <appender-ref ref="CONSOLE"/> &lt;!&ndash; 输出控制台日志 &ndash;&gt;-->
<!--            <appender-ref ref="FILE"/> &lt;!&ndash; 打印日志到文件中。PS: 本地环境下，如果不想打印日志到文件，可注释掉此行 &ndash;&gt;-->
<!--        </root>-->
<!--    </springProfile>-->

    <!-- 生产环境 -->
<!--    <springProfile name="pro">-->
<!--        <include resource="org/springframework/boot/logging/logback/console-appender.xml" />-->
<!--        <root level="INFO">-->
<!--            <appender-ref ref="FILE"/> &lt;!&ndash; 生产环境下，仅打印日志到文件中 &ndash;&gt;-->
<!--        </root>-->
<!--    </springProfile>-->


    <!-- 根输出级别为INFO，控制台中将出现包含info及以上级别的日志-->
    <!-- 日志输出级别 -->
    <root level="INFO">
        <!-- ref值与上面的appender标签的name相对应 -->
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="INFO_FILE"/>
        <appender-ref ref="ERROR_FILE"/>
    </root>

</configuration>

