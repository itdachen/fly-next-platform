import {ref, reactive} from "vue";
import {TableData} from "axios";
import {ColumnProps} from "@/components/table/interface";
import useStringComposable from '@/utils/string';
import useTable from '@/components/table/index';
import {DialogTypeEnum} from "@/components/dialog/Dialog";
import {${ClassName}, ${ClassName}Query} from "@/api/${moduleName}/model/${ClassName}Model";
import ${ClassName}Api from '@/api/${moduleName}/${ClassName}Api'

const ${className}Api = new ${ClassName}Api();

const {isEmpty} = useStringComposable();

const {successMsg, confirmMsgBox} = useTable();

/**
 * ${functionName} 处理
 *
 * @author ${author}
 * @date ${datetime}
 */
export default function use${ClassName}Composable() {

    /**
     * 分页数据
     */
    const tableDataVo = reactive<TableData<${ClassName}>>({
        total: 0,
        rows: [],
    })

    /**
     * 实例化对象
     */
    const ${className} = reactive<${ClassName}>({
        #foreach ($column in $columns)
            #if($column.isDtoVo == '1')
        $column.javaField: '',
            #end
        #end
    });

    /**
     * 实例化查询数据对象
     */
    const queryParams = reactive<${ClassName}Query>({
        page: 1,
        limit: 10,
        #foreach ($column in $columns)
            #if($column.isQuery == '1')
        ${column.javaField}: '',
            #end
        #end
    });

    /**
     *  新增/修改/查看弹窗
     */
    const ref${ClassName} = ref<{
        show: (type: DialogTypeEnum, data?: ${ClassName} | null) =>void,
        onClose: () => void
    }>();

    /**
     * 搜索处理
     * @author ${author}
     * @param params
     */
    const handlerSearch = (params: ${ClassName}Query) => {
        queryParams.page = 1;
        loadTableData(params)
    }

    /**
     * 表单提交
     * @author ${author}
     * @param data 需要提交的参数
     */
    const onSubmit = (data: ${ClassName}) => {
        let id: string | undefined = data.id;
        if (isEmpty(id)) {
            saveInfo(data);
        } else {
            updateInfo(data, id);
        }
    }

    /**
     * 新增接口
     * @author ${author}
     * @param data 新增的数据
     */
    const saveInfo = (data: ${ClassName}) => {
        ${className}Api.saveInfo(data).then(res => {
            successMsg(res.msg);
            ref${ClassName}.value?.onClose();
            loadTableData(queryParams);
        })
    }

    /**
     * 修改数据接口
     * @author ${author}
     * @param data  修改的数据
     * @param id    修改数据的id
     */
    const updateInfo = (data: ${ClassName}, id: string | undefined) => {
        ${className}Api.updateInfo(data, id).then(res => {
            successMsg(res.msg);
            ref${ClassName}.value?.onClose();
            loadTableData(queryParams);
        })
    }

    /**
     * 删除
     * @author ${author}
     * @param id 需要删除的时间id
     * @param title 标题
     */
    const handlerRemove = (id: string, title: string) => {
        confirmMsgBox('确定要删除 ' + title + ' 吗?').then(res => {
                ${className}Api.remove(id).then(res => {
                successMsg(res.msg);
                loadTableData(queryParams);
            })
        })
    }

    /**
     * 重新加载数据
     * @author ${author}
     * @param page
     * @param limit
     */
    const reloadDate = (page: number = 1, limit: number = 10) => {
        queryParams.page = page;
        queryParams.limit = limit;
        loadTableData(queryParams);
    }

    /**
     * 加载分页数据
     * @author ${author}
     * @param params
     */
    const loadTableData = (params: ${ClassName}Query) => {
        ${className}Api.page(params).then(res => {
            tableDataVo.total = res.data.total;
            tableDataVo.rows = res.data.rows;
        })
    }

    /**
     * 新增按钮处理
     * @author ${author}
     */
    const handlerSave = () => {
        ref${ClassName}.value?.show(DialogTypeEnum.SAVE, null);
    }

    /**
     * 编辑按钮
     * @author ${author}
     * @param data
     */
    const handlerUpdate = (data: ${ClassName}) => {
        ref${ClassName}.value?.show(DialogTypeEnum.UPDATE, data);
    }

    /**
     * 查看按钮处理
     * @author ${author}
     * @param data
     */
    const handlerView = (data: ${ClassName}) => {
        ref${ClassName}.value?.show(DialogTypeEnum.VIEW, data);
    }

    /**
     * 分页列表展示项
     */
    const columns: Partial<ColumnProps>[] = [
        #foreach ($column in $columns)
            #if($column.isList == '1')
                {
                    prop: "${column.javaField}",
                    label: "$column.columnComment",
                    align: "center"
                },
            #end
        #end
        {
            prop: "operation",
            label: "操作",
            width: 250,
            align: "center",
            fixed: "right"
        }
    ]

    /**
     * 表单验证
     */
    const rules = reactive({
        #foreach ($column in $columns)
            #if($column.isRequired == '1' && $column.isForm == '1')
                ${column.javaField}: [{required: true, message: '$column.columnComment不能为空', trigger: 'blur'}],
            #end
        #end
    })

    return {
        ref${ClassName},
        ${className},
        tableDataVo,
        columns,
        rules,
        queryParams,
        handlerSave,
        handlerUpdate,
        handlerView,
        reloadDate,
        handlerSearch,
        loadTableData,
        handlerRemove,
        onSubmit
    }

}