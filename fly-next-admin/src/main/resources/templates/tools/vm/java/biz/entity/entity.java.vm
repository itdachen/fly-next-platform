package ${package}.entity;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;

import javax.persistence.Column;
import javax.persistence.Id;
import javax.persistence.Table;
import java.io.Serializable;
#foreach ($column in $columns)
    #if($column.javaType == 'LocalDateTime')
    import java.time.LocalDateTime;
        #break
    #end
    #if($column.javaType == 'BigDecimal')
    import java.math.BigDecimal;
        #break
    #end
#end



/**
 * ${functionName}
 *
 * @author ${author}
 * @date ${datetime}
 */
@Table(name = "${tableName}")
public class ${ClassName} implements Serializable{
private static final long serialVersionUID=1L;

#foreach ($column in $columns)
    /** $column.columnComment */
    #if ($column.isPk == '1')
    @Id
    #end
    @Column(name = "$column.columnName")
    private $column.javaType $column.javaField;

#end

public ${ClassName}(){}


public ${ClassName}(#foreach ($column in $columns)
    $column.javaType $column.javaField#if($foreach.count != $columns.size()), #end#end){
    #foreach ($column in $columns)
            this.$column.javaField = $column.javaField;
    #end
}

public static ${ClassName}Builder builder(){
        return new ${ClassName}Builder();
        }

public static class ${ClassName}Builder {
    #foreach ($column in $columns)
        private $column.javaType $column.javaField;
    #end

    public ${ClassName}Builder() {
    }

    #foreach ($column in $columns)
        #set($field=$column.javaField)
        #set($javaType=$column.javaType)
        /* $column.columnComment */
        public ${ClassName}Builder ${field}($javaType ${field}) {
            this.$column.javaField = $column.javaField;
            return this;
        }
    #end

    public ${ClassName} build() {
        return new ${ClassName}(#foreach ($column in $columns)
            $column.javaField#if($foreach.count != $columns.size()), #end
        #end);
    }

}


    #foreach ($column in $columns)
        #if(!$table.isSuperColumn($column.javaField))
            #if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
                #set($AttrName=$column.javaField)
            #else
                #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
            #end
            public void set${AttrName}($column.javaType $column.javaField) {
                this.$column.javaField = $column.javaField;
            }

            public $column.javaType get${AttrName}() {
                return $column.javaField;
            }

        #end
    #end

    @Override
    public String toString() {
        return new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)
            #foreach ($column in $columns)
                #if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
                    #set($AttrName=$column.javaField)
                #else
                    #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
                #end
                    .append("${column.javaField}", get${AttrName}())
                    #end
                .toString();
    }


}
