package ${package}.sdk.query;

import cn.edu.hubu.framework.core.biz.BizQuery;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;

    #foreach ($column in $queryColumns)
        #if($column.attrType == 'LocalDateTime')
        import java.time.LocalDateTime;
            #break
        #end
    #end
    #if(${hasBigDecimal})
    import java.math.BigDecimal;
    #end

import java.io.Serializable;


/**
 * ${functionName} 查询参数
 *
 * @author ${author}
 * @date ${datetime}
 */
public class ${ClassName}Query extends BizQuery implements Serializable {
    private static final long serialVersionUID = 1L;

    #foreach ($column in $queryColumns)
            /** $column.columnComment */
            private $column.javaType $column.javaField;

    #end

    public ${ClassName}Query() {
    }

    public ${ClassName}Query(int page, int limit, #foreach ($column in $queryColumns)$column.javaType $column.javaField#if($foreach.count != $queryColumns.size()), #end#end) {
        super(page, limit);
        #foreach ($column in $queryColumns)
            this.$column.javaField = $column.javaField;
        #end
    }

    public static ${ClassName}QueryBuilder builder() {
        return new ${ClassName}QueryBuilder();
    }

    public static class ${ClassName}QueryBuilder {
        private Integer page = 1;
        private Integer limit = 10;
        #foreach ($column in $queryColumns)
            private $column.javaType $column.javaField;
        #end

        public ${ClassName}QueryBuilder() {
        }

        public ${ClassName}QueryBuilder page(Integer page) {
            this.page = page;
            return this;
        }

        public ${ClassName}QueryBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        #foreach ($column in $queryColumns)
            #set($field=$column.javaField)
            #set($javaType=$column.javaType)
            /* $column.columnComment */
            public ${ClassName}QueryBuilder ${field}($javaType ${field}) {
                this.$column.javaField = $column.javaField;
                return this;
            }
        #end

        public ${ClassName}Query build() {
            return new ${ClassName}Query(page, limit, #foreach ($column in $queryColumns)$column.javaField#if($foreach.count != $queryColumns.size()), #end#end);
        }

    }



    #foreach ($column in $queryColumns)
        #if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
            #set($AttrName=$column.javaField)
        #else
            #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
        #end

        public void set${AttrName}($column.javaType $column.javaField) {
            this.$column.javaField = $column.javaField;
        }

        public $column.javaType get${AttrName}() {
            return $column.javaField;
        }
    #end

    @Override
    public String toString() {
        return new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)
        .append("page", getPage())
        .append("limit", getLimit())
            #foreach ($column in $queryColumns)
                #if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
                    #set($AttrName=$column.javaField)
                #else
                    #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
                #end
                    .append("${column.javaField}", get${AttrName}())
                    #end
                .toString();
    }

}
